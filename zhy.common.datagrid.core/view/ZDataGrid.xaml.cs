using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using zhy.common.datagrid.core.attribute;
using zhy.common.datagrid.core.view.viewmodel;

namespace zhy.common.datagrid.core.view
{
    /// <summary>
    /// ZDataGrid.xaml 的交互逻辑
    /// </summary>
    public partial class ZDataGrid : UserControl
    {
        public ZDataGrid(IList observableObjects)
        {
            InitializeComponent();
            
            InitDataGrid(observableObjects);
        }

        //public IList ItemsSource
        //{
        //    get { return (IList)GetValue(ItemsSourceProperty); }
        //    set { SetValue(ItemsSourceProperty, value); }
        //}

        //// Using a DependencyProperty as the backing store for ItemsSource.  This enables animation, styling, binding, etc...
        //public static readonly DependencyProperty ItemsSourceProperty =
        //    DependencyProperty.Register("ItemsSource", typeof(IList), typeof(ZDataGrid), new PropertyMetadata(0));


        private void InitDataGrid(IList observableObjects)
        {
            //dataGrid.AutoGenerateColumns = false;
            dataGrid.CanUserAddRows = false;
            dataGrid.CanUserResizeRows = false;
            dataGrid.CanUserSortColumns = true;
            dataGrid.VerticalContentAlignment = VerticalAlignment.Center;
            dataGrid.AutoGeneratedColumns += DataGrid_AutoGeneratedColumns;

            //List<TestItem> testItems = new List<TestItem>()
            //{
            //    new TestItem(){ IsChecked = true, Text = "测试文本1", ComboList = new List<string>(){ "选项1","选项2" }, Combo = "选项1" ,SelectText = "asd"},
            //    new TestItem(){ IsChecked = false, Text = "测试文本2", ComboList = new List<string>(){ "选项1","选项2","选项3" }, Combo = "选项2" },
            //    new TestItem(){ IsChecked = true, Text = "测试文本3", ComboList = new List<string>(){ "选项1","选项2" }, Combo = "选项1" },
            //    new TestItem(){ IsChecked = false, Text = "测试文本4", ComboList = new List<string>(){ "选项1","选项2" }, Combo = "选项2" },
            //};
            //dataGrid.ItemsSource = testItems;
            //dataGrid.ItemsSource = observableObjects;
            this.DataContext = new ZDataGridViewModel(observableObjects);
        }

        private void DataGrid_AutoGeneratedColumns(object? sender, EventArgs e)
        {
            IList objects = (IList)dataGrid.ItemsSource;
            if (!objects.GetType().IsGenericType)
                return;
            Type sourceItemType = objects.GetType().GetGenericArguments()[0];
            PropertyInfo[] propertyInfos = sourceItemType.GetProperties();

            List<PropertyInfo> columnPropertyInfos = new List<PropertyInfo>();
            List<PropertyInfo> columnButtonPropertyInfos = new List<PropertyInfo>();
            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                Attribute? attributeColumn = propertyInfo.GetCustomAttribute(typeof(ZDataColumnAttribute), true);
                Attribute? attributeButton = propertyInfo.GetCustomAttribute(typeof(ZOperateButtonAttribute), true);
                if (attributeColumn != null)
                    columnPropertyInfos.Add(propertyInfo);
                if (attributeButton != null)
                    columnButtonPropertyInfos.Add(propertyInfo);
            }
            
            dataGrid.Columns.Clear();
            foreach (PropertyInfo propertyInfo in columnPropertyInfos)
            {
                Attribute? attribute = propertyInfo.GetCustomAttribute(
                        typeof(ZDataColumnAttribute), true);
                if (attribute == null) continue;
                if(attribute is ZTextDataColumnAttribute)
                {
                    ZTextDataColumnAttribute zTextAttribute = (ZTextDataColumnAttribute)attribute;
                    Style elementStyle = new Style(typeof(TextBlock));
                    elementStyle.Setters.Add(new Setter(TextBlock.VerticalAlignmentProperty, VerticalAlignment.Center));
                    DataGridTextColumn dataGridTextColumn = new DataGridTextColumn()
                    {
                        Header = zTextAttribute.Header,
                        IsReadOnly = zTextAttribute.IsReadOnly,
                        Binding = new Binding()
                        {
                            Path = new PropertyPath(propertyInfo.Name),
                            Mode = BindingMode.TwoWay,
                            UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged
                        },
                        Width = zTextAttribute.Width,
                        ElementStyle = elementStyle
                    };
                    dataGrid.Columns.Add(dataGridTextColumn);
                }
                else if(attribute is ZCheckDataColumnAttribute)
                {
                    ZCheckDataColumnAttribute zCheckAttribute = (ZCheckDataColumnAttribute)attribute;
                    Style elementStyle = new Style(typeof(CheckBox));
                    elementStyle.Setters.Add(new Setter(CheckBox.VerticalAlignmentProperty, VerticalAlignment.Center));
                    elementStyle.Setters.Add(new Setter(CheckBox.HorizontalAlignmentProperty, HorizontalAlignment.Center));
                    DataGridCheckBoxColumn dataGridCheckBoxColumn = new DataGridCheckBoxColumn()
                    {
                        Header = zCheckAttribute.Header,
                        IsReadOnly = zCheckAttribute.IsReadOnly,
                        Binding = new Binding()
                        {
                            Path = new PropertyPath(propertyInfo.Name),
                            Mode = BindingMode.TwoWay,
                            UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged
                        },
                        Width = zCheckAttribute.Width,
                        ElementStyle = elementStyle
                    };
                    dataGrid.Columns.Add(dataGridCheckBoxColumn);
                }
                else if(attribute is ZComboDataColumnAttribute)
                {
                    ZComboDataColumnAttribute zComboAttribute = (ZComboDataColumnAttribute)attribute;
                    DataGridTemplateColumn dataGridTemplateColumn = new DataGridTemplateColumn()
                    { Header = zComboAttribute.Header, Width = zComboAttribute.Width };
                    DataTemplate dataTemplate = new DataTemplate();
                    FrameworkElementFactory cellFactory = new FrameworkElementFactory(typeof(DockPanel));
                    FrameworkElementFactory comboBox = new FrameworkElementFactory(typeof(ComboBox));
                    comboBox.SetBinding(ComboBox.ItemsSourceProperty, new Binding() { Path = new PropertyPath(propertyInfo.Name) });
                    comboBox.SetBinding(ComboBox.SelectedItemProperty, new Binding() { Path = new PropertyPath(zComboAttribute.TargetProperty) });
                    if (zComboAttribute.DisplayMemberPath != null)
                        comboBox.SetBinding(ComboBox.DisplayMemberPathProperty, new Binding() { Path = new PropertyPath(zComboAttribute.DisplayMemberPath) });
                    cellFactory.AppendChild(comboBox);
                    dataTemplate.VisualTree = cellFactory;
                    dataGridTemplateColumn.CellTemplate = dataTemplate;
                    dataGrid.Columns.Add(dataGridTemplateColumn);
                }
                else if(attribute is ZButtonDataColumnAttribute)
                {
                    ZButtonDataColumnAttribute zButtonAttribute = (ZButtonDataColumnAttribute)attribute;
                    DataGridTemplateColumn dataGridTemplateColumn = new DataGridTemplateColumn() 
                    { Header = zButtonAttribute.Header, Width = zButtonAttribute.Width};
                    DataTemplate dataTemplate = new DataTemplate();
                    FrameworkElementFactory cellFactory = new FrameworkElementFactory(typeof(DockPanel));

                    FrameworkElementFactory button = new FrameworkElementFactory(typeof(Button));
                    button.SetValue(DockPanel.DockProperty, Dock.Right);
                    button.SetValue(ContentProperty, zButtonAttribute.ButtonContent);
                    button.SetBinding(Button.CommandProperty, new Binding() { Path = new PropertyPath(zButtonAttribute.RealyCommandName) });
                    button.SetBinding(Button.CommandParameterProperty, new Binding() { Path = new PropertyPath(".") });
                    cellFactory.AppendChild(button);

                    FrameworkElementFactory textBox = new FrameworkElementFactory(typeof(TextBox));
                    textBox.SetValue(TextBox.IsReadOnlyProperty, zButtonAttribute.IsReadOnly);
                    textBox.SetValue(VerticalContentAlignmentProperty, VerticalAlignment.Center);
                    textBox.SetBinding(TextBox.TextProperty, new Binding()
                    {
                        Path = new PropertyPath(propertyInfo.Name),
                        Mode = BindingMode.TwoWay,
                        UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged
                    });
                    cellFactory.AppendChild(textBox);

                    dataTemplate.VisualTree = cellFactory;
                    dataGridTemplateColumn.CellTemplate = dataTemplate;
                    dataGrid.Columns.Add(dataGridTemplateColumn);
                }
            }
            if (columnButtonPropertyInfos.Count > 0)
            {
                //ZButtonDataColumnAttribute zButtonAttribute = (ZButtonDataColumnAttribute)attribute;
                DataGridTemplateColumn dataGridTemplateColumn = new DataGridTemplateColumn()
                { Header = "操 作", Width = DataGridLength.Auto };
                DataTemplate dataTemplate = new DataTemplate();
                FrameworkElementFactory cellFactory = new FrameworkElementFactory(typeof(StackPanel));
                cellFactory.SetValue(StackPanel.OrientationProperty, Orientation.Horizontal);
                cellFactory.SetValue(StackPanel.HorizontalAlignmentProperty, HorizontalAlignment.Center);
                foreach (PropertyInfo propertyInfo in columnButtonPropertyInfos)
                {
                    Attribute? attribute = propertyInfo.GetCustomAttribute(
                            typeof(ZOperateButtonAttribute), true);
                    if (attribute == null) continue;
                    if (attribute is ZOperateColumnButtonAttribute)
                    {
                        ZOperateColumnButtonAttribute zOperateColumnButtonAttribute = (ZOperateColumnButtonAttribute)attribute;
                        FrameworkElementFactory button = new FrameworkElementFactory(typeof(Button));
                        button.SetValue(ContentProperty, zOperateColumnButtonAttribute.Content);
                        button.SetBinding(Button.CommandProperty, new Binding() { Path = new PropertyPath(propertyInfo.Name) });
                        MultiBinding multiBinding = new MultiBinding();
                        multiBinding.Converter = new ColumnButtonConverter();
                        multiBinding.Bindings.Add(new Binding() { Path = new PropertyPath(".") });
                        multiBinding.Bindings.Add(new Binding() { Path = new PropertyPath("ItemsSource"), ElementName= "dataGrid" });
                        button.SetBinding(Button.CommandParameterProperty, multiBinding);
                        cellFactory.AppendChild(button);
                    }
                    else if (attribute is ZOperateTopButtonAttribute)
                    {

                    }
                }
                dataTemplate.VisualTree = cellFactory;
                dataGridTemplateColumn.CellTemplate = dataTemplate;
                dataGrid.Columns.Add(dataGridTemplateColumn);
            }
        }

        internal class ZDataGridViewModel : ObservableObject
        {
            public ZDataGridViewModel(IList observableObjects)
            {
                ObservableCollection<ObservableObject> observableObjectsColl = new ObservableCollection<ObservableObject>();
                foreach (var item in observableObjects)
                    observableObjectsColl.Add((ObservableObject)item);
                ObservableObjects = observableObjectsColl;
            }
            private IList _observableObjects;
            public IList ObservableObjects
            {
                get { return _observableObjects; }
                set { SetProperty(ref _observableObjects, value); }
            }
        }

        internal class ColumnButtonConverter : IMultiValueConverter
        {
            public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
            {
                return new object[] { values[0], values[1] };
            }
            public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)
            {
                throw new NotImplementedException();
            }
        }
    }
}
