using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using zhy.common.datagrid.core.attribute;
using zhy.common.datagrid.core.enumeration;
using zhy.common.datagrid.core.exception;
using zhy.common.datagrid.core.view.viewhelper;
using zhy.common.datagrid.core.view.viewmodel;

namespace zhy.common.datagrid.core.view
{
    /// <summary>
    /// ZDataGrid.xaml 的交互逻辑
    /// </summary>
    public partial class ZDataGrid : UserControl
    {
        public ZDataGrid() 
        {
            InitializeComponent();
            InitDataGrid();
            InitSearchComponent();
        }

        public IList ItemsSource
        {
            get { return (IList)GetValue(ItemsSourceProperty); }
            set 
            {
                SetValue(ItemsSourceProperty, value);
            }
        }

        public static readonly DependencyProperty ItemsSourceProperty =
            DependencyProperty.Register("ItemsSource", typeof(IList), typeof(ZDataGrid), new PropertyMetadata(default(IList)));

        private void InitDataGrid()
        {
            dataGrid.CanUserAddRows = false;
            dataGrid.CanUserResizeRows = false;
            dataGrid.CanUserSortColumns = true;
            dataGrid.VerticalContentAlignment = VerticalAlignment.Center;
            dataGrid.AutoGeneratedColumns += DataGrid_AutoGeneratedColumns;
        }

        private IList _totalObservableObjects;
        private IList _searchObservableObjects;
        private void InitSearchComponent()
        {
            Button buttonSearch = new Button();
            buttonSearch.Name = "buttonSearch";
            buttonSearch.Content = "查 询";
            buttonSearch.Style = this.FindResource(ButtonStyle.DefaultButton.ToString()) as Style;
            buttonSearch.SetValue(DockPanel.DockProperty, Dock.Right);
            buttonSearch.Margin = new Thickness(1, 2, 1, 2);
            TextBox textBoxSearch = new TextBox();
            textBoxSearch.Name = "textBoxSearch";
            textBoxSearch.Margin = new Thickness(1, 2, 1, 2);
            textBoxSearch.SetValue(TextBoxHelper.TextMarkProperty, "输入查询内容");
            textBoxSearch.VerticalContentAlignment = VerticalAlignment.Center;
            textBoxSearch.Style = this.FindResource("InfoTextBox") as Style;
            Button buttonCancelSearch = new Button();
            buttonCancelSearch.Name = "buttonCancelSearch";
            buttonCancelSearch.Content = "取 消";
            buttonCancelSearch.Visibility = Visibility.Collapsed;
            buttonCancelSearch.Style = this.FindResource(ButtonStyle.ErrorButton.ToString()) as Style;
            buttonCancelSearch.SetValue(DockPanel.DockProperty, Dock.Right);
            buttonCancelSearch.Margin = new Thickness(1, 2, 1, 2);

            buttonSearch.Click += ButtonSearch_Click; ;
            
            buttonCancelSearch.Click += (o, e) =>
            {
                textBoxSearch.Text = string.Empty;
                ButtonSearch_Click(o, e);
            };
           
            textBoxSearch.KeyUp += (o, e) =>
            {
                if (e.Key == Key.Enter)
                {
                    buttonSearch.Focus();
                        ButtonSearch_Click(o, e);
                    textBoxSearch.Focus();
                }
                else if(e.Key == Key.Escape)
                {
                    textBoxSearch.Text = string.Empty;
                    ButtonSearch_Click(o, e);
                }
            };

            dockPanelSearch.Children.Add(buttonSearch);
            dockPanelSearch.Children.Add(buttonCancelSearch);
            dockPanelSearch.Children.Add(textBoxSearch);
        }

        private void ButtonSearch_Click(object sender, RoutedEventArgs e)
        {
            UpdateTotalItems();
            TextBox textBoxSearch = null;
            Button buttonCancelSearch = null;
            foreach (var item in dockPanelSearch.Children)
            {
                if(item is TextBox)
                {
                    TextBox textBoxItem = (TextBox)item;
                    if (textBoxItem.Name == "textBoxSearch")
                        textBoxSearch = textBoxItem;
                }
                else if (item is Button)
                {
                    Button buttonItem = (Button)item;
                    if (buttonItem.Name == "buttonCancelSearch")
                        buttonCancelSearch = buttonItem;
                }
            }
            
            if (string.IsNullOrEmpty(textBoxSearch.Text))
            {
                if (_totalObservableObjects == null || _totalObservableObjects.Count < 1)
                    return;
                ItemsSource.Clear();
                foreach (var item in _totalObservableObjects)
                    ItemsSource.Add(item);
                _totalObservableObjects = null;
                buttonCancelSearch.Visibility = Visibility.Collapsed;
            }
            else
            {
                if (_totalObservableObjects == null || _totalObservableObjects.Count < 1)
                {
                    _totalObservableObjects = new List<object>();
                    foreach (var item in ItemsSource)
                        _totalObservableObjects.Add(item);
                }
                ItemsSource.Clear();
                List<PropertyInfo> propertyInfos = GetSearchColumnPropertyInfo(ItemsSource);
                foreach (var item in _totalObservableObjects)
                {
                    bool check = CheckItem(item, propertyInfos, textBoxSearch.Text);
                    if (check)
                        ItemsSource.Add(item);
                }
                _searchObservableObjects = new List<object>();
                foreach (var item in ItemsSource)
                    _searchObservableObjects.Add(item);
                buttonCancelSearch.Visibility = Visibility.Visible;
            }
        }

        private void DataGrid_AutoGeneratedColumns(object? sender, EventArgs e)
        {
            IList objects = (IList)dataGrid.ItemsSource;
            if (!objects.GetType().IsGenericType)
                return;
            Type sourceItemType = objects.GetType().GetGenericArguments()[0];
            PropertyInfo[] propertyInfos = sourceItemType.GetProperties();
            MethodInfo[] methodInfos = sourceItemType.GetMethods();
            
            SortedDictionary<ZDataColumnAttribute, PropertyInfo> sortColumnTempDic =
                new SortedDictionary<ZDataColumnAttribute, PropertyInfo>(new ZDataColumnAttributeIndexComper());
            SortedDictionary<ZOperateButtonAttribute, PropertyInfo> sortButtonColumnDic =
                new SortedDictionary<ZOperateButtonAttribute, PropertyInfo>(new ZOperateButtonAttributeIndexComper());
            SortedDictionary<ZOperateButtonAttribute, MethodInfo> sortButtonTopDic =
                new SortedDictionary<ZOperateButtonAttribute, MethodInfo>(new ZOperateButtonAttributeIndexComper());
            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                Attribute? attributeColumn = propertyInfo.GetCustomAttribute(typeof(ZDataColumnAttribute), true);
                Attribute? attributeButton = propertyInfo.GetCustomAttribute(typeof(ZOperateButtonAttribute), true);
                if (attributeColumn != null)
                {
                    ZDataColumnAttribute? zDataColumnAttribute = (ZDataColumnAttribute)attributeColumn;
                    sortColumnTempDic.Add(zDataColumnAttribute, propertyInfo);
                }
                if (attributeButton != null)
                {
                    ZOperateButtonAttribute zOperateButtonAttribute = (ZOperateButtonAttribute)attributeButton;
                    sortButtonColumnDic.Add(zOperateButtonAttribute, propertyInfo);
                }
            }
            foreach(MethodInfo methodInfo in methodInfos)
            {
                Attribute? attribute = methodInfo.GetCustomAttribute(typeof(ZOperateButtonAttribute), true);
                if (attribute != null)
                {
                    ZOperateButtonAttribute zOperateButtonAttribute = (ZOperateButtonAttribute)attribute;
                    sortButtonTopDic.Add(zOperateButtonAttribute, methodInfo);
                }
            }

            UpdateSearchTextMark(sortColumnTempDic);

            dataGrid.Columns.Clear();
            foreach (var item in sortColumnTempDic)
            {
                PropertyInfo propertyInfo = item.Value;
                Attribute? attribute = item.Key;
                if (attribute == null) continue;
                if (attribute is ZTextDataColumnAttribute)
                {
                    ZTextDataColumnAttribute zTextAttribute = (ZTextDataColumnAttribute)attribute;
                    Style elementStyle = new Style(typeof(TextBlock));
                    elementStyle.Setters.Add(new Setter(TextBlock.VerticalAlignmentProperty, VerticalAlignment.Center));
                    elementStyle.Setters.Add(new Setter(TextBlock.MarginProperty, new Thickness(6, 0, 6, 0)));
                    DataGridTextColumn dataGridTextColumn = new DataGridTextColumn()
                    {
                        Header = zTextAttribute.Header,
                        IsReadOnly = zTextAttribute.IsReadOnly,
                        Binding = new Binding()
                        {
                            Path = new PropertyPath(propertyInfo.Name),
                            Mode = BindingMode.TwoWay,
                            UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged
                        },
                        Width = zTextAttribute.Width,
                        ElementStyle = elementStyle
                    };
                    dataGrid.Columns.Add(dataGridTextColumn);
                }
                else if (attribute is ZCheckDataColumnAttribute)
                {
                    ZCheckDataColumnAttribute zCheckAttribute = (ZCheckDataColumnAttribute)attribute;
                    Style elementStyle = new Style(typeof(CheckBox));
                    elementStyle.Setters.Add(new Setter(VerticalAlignmentProperty, VerticalAlignment.Center));
                    elementStyle.Setters.Add(new Setter(HorizontalAlignmentProperty, HorizontalAlignment.Center));
                    elementStyle.Setters.Add(new Setter(IsEnabledProperty, !zCheckAttribute.IsReadOnly));
                    DataGridCheckBoxColumn dataGridCheckBoxColumn = new DataGridCheckBoxColumn()
                    {
                        Header = zCheckAttribute.Header,
                        //IsReadOnly = zCheckAttribute.IsReadOnly,
                        Binding = new Binding()
                        {
                            Path = new PropertyPath(propertyInfo.Name),
                            Mode = BindingMode.TwoWay,
                            UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged
                        },
                        Width = zCheckAttribute.Width,
                        ElementStyle = elementStyle
                    };
                    dataGrid.Columns.Add(dataGridCheckBoxColumn);
                }
                else if (attribute is ZComboDataColumnAttribute)
                {
                    ZComboDataColumnAttribute zComboAttribute = (ZComboDataColumnAttribute)attribute;
                    DataGridTemplateColumn dataGridTemplateColumn = new DataGridTemplateColumn()
                    { Header = zComboAttribute.Header, Width = zComboAttribute.Width };
                    //dataGridTemplateColumn.IsReadOnly = zComboAttribute.IsReadOnly;
                    dataGridTemplateColumn.SortMemberPath = zComboAttribute.TargetProperty;
                    DataTemplate dataTemplate = new DataTemplate();
                    FrameworkElementFactory cellFactory = new FrameworkElementFactory(typeof(DockPanel));
                    FrameworkElementFactory comboBox = new FrameworkElementFactory(typeof(ComboBox));
                    comboBox.SetValue(ComboBox.StyleProperty, this.FindResource("InfoComboBox"));
                    comboBox.SetValue(ComboBox.BorderThicknessProperty, new Thickness(0));
                    comboBox.SetBinding(ComboBox.ForegroundProperty, new Binding());
                    comboBox.SetBinding(ComboBox.BackgroundProperty, new Binding());
                    comboBox.SetBinding(ComboBox.ItemsSourceProperty, new Binding()
                    {
                        Path = new PropertyPath(propertyInfo.Name),
                        Mode = BindingMode.TwoWay,
                        UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged
                    });
                    comboBox.SetBinding(ComboBox.SelectedItemProperty, new Binding()
                    {
                        Path = new PropertyPath(zComboAttribute.TargetProperty),
                        Mode = BindingMode.TwoWay,
                        UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged
                    });
                    comboBox.SetValue(ComboBox.SelectedIndexProperty, 0);
                    comboBox.SetValue(ComboBox.IsEnabledProperty, !zComboAttribute.IsReadOnly);
                    if (zComboAttribute.DisplayMemberPath != null)
                    {
                        comboBox.SetValue(ComboBox.DisplayMemberPathProperty, zComboAttribute.DisplayMemberPath);
                        dataGridTemplateColumn.SortMemberPath = zComboAttribute.DisplayMemberPath;
                    }
                    dataGridTemplateColumn.CanUserSort = true;
                    cellFactory.AppendChild(comboBox);
                    dataTemplate.VisualTree = cellFactory;
                    dataGridTemplateColumn.CellTemplate = dataTemplate;
                    dataGrid.Columns.Add(dataGridTemplateColumn);
                }
                else if (attribute is ZButtonDataColumnAttribute)
                {
                    ZButtonDataColumnAttribute zButtonAttribute = (ZButtonDataColumnAttribute)attribute;
                    DataGridTemplateColumn dataGridTemplateColumn = new DataGridTemplateColumn()
                    { Header = zButtonAttribute.Header, Width = zButtonAttribute.Width };
                    DataTemplate dataTemplate = new DataTemplate();
                    FrameworkElementFactory cellFactory = new FrameworkElementFactory(typeof(DockPanel));

                    FrameworkElementFactory button = new FrameworkElementFactory(typeof(Button));
                    button.SetValue(DockPanel.DockProperty, Dock.Right);
                    button.SetValue(ContentProperty, zButtonAttribute.ButtonContent);
                    button.SetValue(Button.MarginProperty, new Thickness(1, 2, 2, 1));
                    button.SetValue(Button.StyleProperty, this.FindResource(zButtonAttribute.ButtonStyle.ToString()));
                    button.SetBinding(Button.CommandProperty, new Binding() { Path = new PropertyPath(zButtonAttribute.RelayCommandName) });
                    button.SetBinding(Button.CommandParameterProperty, new Binding() { Path = new PropertyPath(".") });
                    cellFactory.AppendChild(button);

                    FrameworkElementFactory textBox = new FrameworkElementFactory(typeof(TextBox));
                    textBox.SetValue(TextBox.IsReadOnlyProperty, zButtonAttribute.IsReadOnly);
                    textBox.SetValue(TextBox.MarginProperty, new Thickness(5, 0, 5, 0));
                    textBox.SetValue(VerticalContentAlignmentProperty, VerticalAlignment.Center);
                    textBox.SetValue(TextBox.BorderThicknessProperty, new Thickness(0));
                    textBox.SetBinding(TextBox.ForegroundProperty, new Binding());
                    textBox.SetBinding(TextBox.BackgroundProperty, new Binding());
                    if (string.IsNullOrEmpty(zButtonAttribute.DisplayMemberPath))
                    {
                        textBox.SetBinding(TextBox.TextProperty, new Binding()
                        {
                            Path = new PropertyPath(propertyInfo.Name),
                            Mode = BindingMode.TwoWay,
                            UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged
                        });
                    }
                    else
                    {
                        textBox.SetBinding(TextBox.TextProperty, new Binding()
                        {
                            Path = new PropertyPath(propertyInfo.Name + "." + zButtonAttribute.DisplayMemberPath),
                            Mode = BindingMode.TwoWay,
                            UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged
                        });
                    }

                    cellFactory.AppendChild(textBox);

                    dataTemplate.VisualTree = cellFactory;
                    dataGridTemplateColumn.CellTemplate = dataTemplate;
                    dataGrid.Columns.Add(dataGridTemplateColumn);
                }
            }
            if (sortButtonColumnDic.Count > 0)
            {
                DataGridTemplateColumn dataGridTemplateColumn = new DataGridTemplateColumn()
                { Header = "操 作", Width = DataGridLength.Auto };
                DataTemplate dataTemplate = new DataTemplate();
                FrameworkElementFactory cellFactory = new FrameworkElementFactory(typeof(StackPanel));
                cellFactory.SetValue(StackPanel.OrientationProperty, Orientation.Horizontal);
                cellFactory.SetValue(StackPanel.HorizontalAlignmentProperty, HorizontalAlignment.Center);
                foreach(var item in sortButtonColumnDic)
                {
                    PropertyInfo propertyInfo = item.Value;
                    Attribute? attribute = item.Key;
                    if (attribute == null) continue;
                    if (attribute is ZOperateColumnButtonAttribute)
                    {
                        ZOperateColumnButtonAttribute zOperateColumnButtonAttribute = (ZOperateColumnButtonAttribute)attribute;
                        FrameworkElementFactory button = new FrameworkElementFactory(typeof(Button));
                        button.SetValue(Button.MarginProperty, new Thickness(1,2,2,1));
                        button.SetValue(Button.StyleProperty, this.FindResource(zOperateColumnButtonAttribute.ButtonStyle.ToString()));
                        button.SetValue(ContentProperty, zOperateColumnButtonAttribute.Content);
                        button.SetBinding(Button.CommandProperty, new Binding() { Path = new PropertyPath(propertyInfo.Name) });
                        MultiBinding multiBinding = new MultiBinding();
                        multiBinding.Converter = new ColumnButtonConverter();
                        multiBinding.Bindings.Add(new Binding() { Path = new PropertyPath(".") });
                        multiBinding.Bindings.Add(new Binding() { Path = new PropertyPath("ItemsSource"), ElementName= "dataGrid" });
                        button.SetBinding(Button.CommandParameterProperty, multiBinding);
                        cellFactory.AppendChild(button);
                    }
                }
                dataTemplate.VisualTree = cellFactory;
                dataGridTemplateColumn.CellTemplate = dataTemplate;
                dataGrid.Columns.Add(dataGridTemplateColumn);
            }
            foreach (var item in sortButtonTopDic)
            {
                MethodInfo methodInfo = item.Value;
                Attribute? attribute = item.Key;
                if (attribute is ZOperateTopButtonAttribute)
                {
                    ZOperateTopButtonAttribute zOperateTopButtonAttribute = (ZOperateTopButtonAttribute)attribute;
                    Button button = new Button();
                    button.SetValue(MarginProperty, new Thickness(1, 2, 1, 2));
                    button.SetValue(Button.StyleProperty, this.FindResource(zOperateTopButtonAttribute.ButtonStyle.ToString()));
                    button.Content = zOperateTopButtonAttribute.Content;
                    button.SetValue(DockPanel.DockProperty, Dock.Right);
                    button.Click += (sd, e) =>
                    {
                        if (!methodInfo.IsStatic)
                            throw new ZDataGridException("特性 `ZOperateTopButtonAttribute` 标注方法必须为静态方法！");
                        methodInfo.Invoke(null, new object[] { dataGrid.ItemsSource });
                    };
                    dockPanelTop.Children.Add(button);
                }
            }
        }

        private List<PropertyInfo> GetSearchColumnPropertyInfo(object ObservableObjects)
        {
            List<PropertyInfo> columnPropertyInfos = new List<PropertyInfo>();
            if (!ObservableObjects.GetType().IsGenericType)
                return columnPropertyInfos;
            Type sourceItemType = ObservableObjects.GetType().GetGenericArguments()[0];
            PropertyInfo[] propertyInfos = sourceItemType.GetProperties();
            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                Attribute? attributeColumn = propertyInfo.GetCustomAttribute(typeof(ZDataColumnAttribute), true);
                if (attributeColumn != null && ((ZDataColumnAttribute)attributeColumn).IsSearchProperty)
                    columnPropertyInfos.Add(propertyInfo);
            }
            return columnPropertyInfos;
        }

        private bool CheckItem(object item, List<PropertyInfo> propertyInfos, string searchText)
        {
            if (string.IsNullOrEmpty(searchText))
                return true;
            foreach (var propertyInfo in propertyInfos)
            {
                object? val = propertyInfo.GetValue(item, null);
                if (val == null) continue;
                Attribute? attribute = propertyInfo.GetCustomAttribute(typeof(ZDataColumnAttribute));
                if(attribute is ZComboDataColumnAttribute && !string.IsNullOrEmpty(((ZComboDataColumnAttribute)attribute).DisplayMemberPath))
                {
                    ZComboDataColumnAttribute zComboDataColumnAttribute = (ZComboDataColumnAttribute)attribute;
                    PropertyInfo? pi = item.GetType().GetProperty(zComboDataColumnAttribute.TargetProperty);
                    object? vval = pi.GetValue(item);
                    if (vval == null) continue;
                    PropertyInfo? ppi = vval.GetType().GetProperty(((ZComboDataColumnAttribute)attribute).DisplayMemberPath);
                    if (ppi == null) continue;
                    object? vvval = ppi.GetValue(vval, null);
                    if (vvval == null) continue;
                    if (vvval.ToString().ToLower().Contains(searchText.ToLower()))
                        return true;
                }
                else if (attribute is ZButtonDataColumnAttribute && !string.IsNullOrEmpty(((ZButtonDataColumnAttribute)attribute).DisplayMemberPath))
                {
                    PropertyInfo? pi = val.GetType().GetProperty(((ZButtonDataColumnAttribute)attribute).DisplayMemberPath);
                    if (pi == null) continue;
                    object? vval = pi.GetValue(val, null);
                    if (vval == null) continue;
                    if (vval.ToString().ToLower().Contains(searchText.ToLower()))
                        return true;
                }
                else
                {
                    if (val.ToString().ToLower().Contains(searchText.ToLower()))
                        return true;
                }
            }
            return false;
        }

        private bool CompareIList(IList list1, IList list2)
        {
            if (list1.Count != list2.Count)
                return false;
            foreach (var item in list1)
            {
                int idx = list2.IndexOf(item);
                if (idx < 0)
                    return false;
            }
            return true;
        }

        private void UpdateTotalItems()
        {
            if (_totalObservableObjects != null && _totalObservableObjects.Count > 0)
            {
                bool modify = !CompareIList(ItemsSource, _searchObservableObjects);
                if (modify)
                {
                    foreach (var item in _searchObservableObjects)
                    {
                        int idxRm = ItemsSource.IndexOf(item);
                        if (idxRm < 0)
                            _totalObservableObjects.Remove(item);
                    }
                    foreach (var item in ItemsSource)
                    {
                        int idxAdd = _searchObservableObjects.IndexOf(item);
                        if (idxAdd < 0)
                            _totalObservableObjects.Add(item);
                    }
                }
            }
        }

        private void UpdateSearchTextMark(SortedDictionary<ZDataColumnAttribute, PropertyInfo> dic)
        {
            string mark = null;
            foreach (var item in dic)
            {
                if (item.Key.IsSearchProperty)
                {
                    if (mark != null)
                        mark += " / ";
                    mark += item.Key.Header.Replace(" ","");
                }
            }
            if (mark == null)
                return;
            mark = "查询 " + mark + " 信息";
            foreach (var item in dockPanelSearch.Children)
            {
                if (item is TextBox && ((TextBox)item).Name == "textBoxSearch")
                {
                    TextBox textBoxItem = (TextBox)item;
                    textBoxItem.SetValue(TextBoxHelper.TextMarkProperty, mark);
                    return;
                }
            }
        }

        internal class ColumnButtonConverter : IMultiValueConverter
        {
            public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
            {
                return new object[] { values[0], values[1] };
            }
            public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)
            {
                throw new NotImplementedException();
            }
        }

        internal class ZDataColumnAttributeIndexComper : IComparer<ZDataColumnAttribute>
        {
            public int Compare(ZDataColumnAttribute? x, ZDataColumnAttribute? y)
            {
                if (x == null && y == null) return 1;
                else if (x == null && y != null) return 1;
                else if (x != null && y == null) return -1;
                else if (x.Index == y.Index) return 1;
                else if (x.Index == -1) return 1;
                else if (y.Index == -1) return -1;
                else if (x.Index > y.Index) return 1;
                else return -1;
            }
        }
        internal class ZOperateButtonAttributeIndexComper : IComparer<ZOperateButtonAttribute>
        {
            public int Compare(ZOperateButtonAttribute? x, ZOperateButtonAttribute? y)
            {
                if (x == null && y == null) return 1;
                else if (x == null && y != null) return 1;
                else if (x != null && y == null) return -1;
                else if (x.Index == y.Index) return 1;
                else if (x.Index == -1) return 1;
                else if (y.Index == -1) return -1;
                else if (x.Index > y.Index) return 1;
                else return -1;
            }
        }
    }
}
