<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <LinearGradientBrush x:Key="InfoBrushSelected" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="#1177DD" />
        <GradientStop Offset="1" Color="#000099" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="WarnBrushSelected" Color="#CC7700" />
    <SolidColorBrush x:Key="ErrorBrushSelected" Color="#CC2200" />
    <SolidColorBrush x:Key="SuccessBrushSelected" Color="#338899" />
    <SolidColorBrush x:Key="LightBrushSelected" Color="#dddddd" />
    <SolidColorBrush x:Key="DarkBrushSelected" Color="#333333" />
    <LinearGradientBrush x:Key="InfoBrush" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="#2288FF" />
        <GradientStop Offset="1" Color="#0022AA" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="InfoBrushFocusedLight" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="#EEFFFF" />
        <GradientStop Offset="1" Color="#DDFFFF" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="InfoBrushFocusedDark" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="#DDFFFF" />
        <GradientStop Offset="1" Color="#88DDFF" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="WarnBrush" Color="#FF9900" />
    <SolidColorBrush x:Key="ErrorBrush" Color="#FF5500" />
    <SolidColorBrush x:Key="SuccessBrush" Color="#66BB91" />
    <SolidColorBrush x:Key="LightBrush" Color="#ffffff" />
    <SolidColorBrush x:Key="DarkBrush" Color="#000000" />
    <Style x:Key="InfoButton" TargetType="Button">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource InfoBrushSelected}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter
                            Margin="15,5"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="13" />
    </Style>
    <Style x:Key="WarnButton" TargetType="Button">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource WarnBrushSelected}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter
                            Margin="15,5"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource WarnBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="13" />
    </Style>
    <Style x:Key="ErrorButton" TargetType="Button">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource ErrorBrushSelected}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter
                            Margin="15,5"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource ErrorBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="13" />
    </Style>
    <Style x:Key="SuccessButton" TargetType="Button">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource SuccessBrushSelected}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter
                            Margin="15,5"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="13" />
    </Style>
    <Style x:Key="DefaultButton" TargetType="Button">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource LightBrushSelected}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter
                            Margin="15,5"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource DarkBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DarkBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="13" />
    </Style>
    <Style x:Key="InfoGrid" TargetType="DataGrid">
        <Setter Property="RowStyle">
            <Setter.Value>
                <Style TargetType="DataGridRow">
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource InfoBrushFocusedLight}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource InfoBrushFocusedLight}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource InfoBrushFocusedDark}" />
                            <Setter Property="Foreground" Value="{Binding}" />
                            <Setter Property="Background" Value="{Binding}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="InfoComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="White" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <!--  ComBoxItem  -->
                <Style TargetType="ComboBoxItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ComboBoxItem">
                                <Border
                                    Name="Back"
                                    Background="Transparent"
                                    BorderThickness="0,0,0,0"
                                    Cursor="Hand">
                                    <ContentPresenter
                                        Margin="5"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center" />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="Back" Property="Background" Value="{DynamicResource InfoBrushFocusedDark}" />
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="Back" Property="Background" Value="{DynamicResource InfoBrushFocusedLight}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid x:Name="grid">
                                <ToggleButton
                                    Width="{Binding ElementName=grid, Path=ActualWidth}"
                                    Height="{Binding ElementName=grid, Path=ActualHeight}"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Background="{TemplateBinding Background}"
                                    ClickMode="Press"
                                    Content="{TemplateBinding Text}"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.Style>
                                        <Style TargetType="ToggleButton">
                                            <Setter Property="Background" Value="White" />
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ToggleButton">
                                                        <Border Background="{TemplateBinding Background}" BorderThickness="0">
                                                            <TextBlock
                                                                Margin="3"
                                                                HorizontalAlignment="Left"
                                                                VerticalAlignment="Center"
                                                                Foreground="{TemplateBinding Foreground}"
                                                                Text="{TemplateBinding Content}" />
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="White" />
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="False">
                                                    <Setter Property="Background" Value="White" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                            </Grid>
                            <Grid>
                                <ToggleButton
                                    ClickMode="Press"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.Style>
                                        <Style TargetType="ToggleButton">
                                            <Setter Property="Background" Value="Transparent" />
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ToggleButton">
                                                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                                                            <Grid>
                                                                <TextBlock
                                                                    x:Name="arrow_tb"
                                                                    Margin="10,0"
                                                                    HorizontalAlignment="Right"
                                                                    VerticalAlignment="Center"
                                                                    FontSize="17"
                                                                    Foreground="{TemplateBinding Foreground}"
                                                                    RenderTransformOrigin="0.5,0.5"
                                                                    Text="△">
                                                                    <TextBlock.RenderTransform>
                                                                        <TransformGroup>
                                                                            <ScaleTransform />
                                                                            <SkewTransform />
                                                                            <RotateTransform />
                                                                            <TranslateTransform />
                                                                        </TransformGroup>
                                                                    </TextBlock.RenderTransform>
                                                                </TextBlock>
                                                            </Grid>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True" />
                                                            <EventTrigger RoutedEvent="Checked">
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="arrow_tb" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                                                            <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="180" />
                                                                        </DoubleAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </EventTrigger>

                                                            <EventTrigger RoutedEvent="Unchecked">
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="arrow_tb" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="180" />
                                                                            <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0" />
                                                                        </DoubleAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </EventTrigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                            </Grid>
                            <Popup
                                x:Name="Popup"
                                AllowsTransparency="True"
                                Focusable="False"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                Placement="Bottom"
                                PopupAnimation="Slide">
                                <Border
                                    x:Name="DropDown"
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    CornerRadius="1"
                                    SnapsToDevicePixels="True">
                                    <Border.Effect>
                                        <DropShadowEffect
                                            BlurRadius="2"
                                            Opacity="0.5"
                                            ShadowDepth="0"
                                            Color="Black" />
                                    </Border.Effect>
                                    <ScrollViewer
                                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                        Margin="4,6,4,6"
                                        CanContentScroll="True"
                                        HorizontalScrollBarVisibility="Auto"
                                        SnapsToDevicePixels="True"
                                        Style="{DynamicResource ScrollViewerStyle}"
                                        VerticalScrollBarVisibility="Auto">
                                        <!--  StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True  -->
                                        <StackPanel
                                            Background="White"
                                            IsItemsHost="True"
                                            KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                        <Border.Effect>
                            <DropShadowEffect
                                BlurRadius="1"
                                Opacity="0.3"
                                ShadowDepth="-1"
                                Color="#FF969696" />
                        </Border.Effect>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>
</ResourceDictionary>